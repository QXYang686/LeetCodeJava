package problem416;

import java.util.*;

public class Solution1 {
    public boolean canPartition(int[] nums) {
        // 小于两个元素,无法划分
        if (nums.length < 2) return false;
        // 和为奇数,无法划分
        int sum = Arrays.stream(nums).sum();
        if (sum % 2 == 1) return false;
        int target = sum / 2;
        // 最大数大于和的一半,无法划分
        int max = Arrays.stream(nums).max().getAsInt();
        if (max > target) return false;
        boolean[] dp = new boolean[target + 1];
        dp[0] = true;
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            for (int j = target; j >= num ;j--) {
                dp[j] |= dp[j - num];
            }
        }
        return dp[target];
    }

    public static void main(String[] args) {
//        System.out.println(new Solution1().canPartition(new int[]{1, 5, 11, 5}));
//        System.out.println(new Solution1().canPartition(new int[]{1, 2, 3, 5}));
//        System.out.println(new Solution1().canPartition(new int[]{
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,100,100,100,100,100,100,100,100,100,100,
//                100,100,100,99,97
//        }));
        System.out.println(new Solution1().canPartition(new int[]{
                4,4,4,4,4,4,4,4,8,8,8,8,8,8,8,8,
                12,12,12,12,12,12,12,12,16,16,16,16,16,16,16,16,
                20,20,20,20,20,20,20,20,24,24,24,24,24,24,24,24,
                28,28,28,28,28,28,28,28,32,32,32,32,32,32,32,32,
                36,36,36,36,36,36,36,36,40,40,40,40,40,40,40,40,
                44,44,44,44,44,44,44,44,48,48,48,48,48,48,48,48,
                52,52,52,52,52,52,52,52,56,56,56,56,56,56,56,56,
                60,60,60,60,60,60,60,60,64,64,64,64,64,64,64,64,
                68,68,68,68,68,68,68,68,72,72,72,72,72,72,72,72,
                76,76,76,76,76,76,76,76,80,80,80,80,80,80,80,80,
                84,84,84,84,84,84,84,84,88,88,88,88,88,88,88,88,
                92,92,92,92,92,92,92,92,96,96,96,96,96,96,96,96,97,99
        }));
    }
}
